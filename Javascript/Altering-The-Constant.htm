---
layout: default
title: Altering the Constant | MMINAIL
---
<div class="container-fluid">
	<div class="row-fluid">

<main>
<article>

<hgroup class="text-left">
	<h3>Altering the Constant in Javascript</h3>
</hgroup>
	<hr class="green-groove" />

<p>
	<span>Welcome! This is the Altering the Constant in Javascript page of the <abbr class='oblique-text' title='Medical Marijuana Initiative of North America - International Limited, an Arizona Benefit Corporation'>MMINAIL</abbr>.</span>
</p>
	<hr class="green-groove" />

<hgroup class="text-left">
	<h4>Introduction</h4>
</hgroup>
	<hr class="green-groove" />

<p>
	<span>The Altering the Constant in Javascript program renders a series of outputs to the console based on given unalterable constants and mutable variables from a hypothetical corporation.</span>
</p>
	<hr class='green-groove' />

<hgroup class="text-left">
	<h4>Rendering the Result</h4>
</hgroup>
	<hr class="green-groove" />

<p>
    <span>Ok ... it's time to give this program a whirl!</span>
</p>
	<hr class="green-groove" />

{% include firefox.htm %}

    <hr class='green-groove' />

<hgroup class="text-left">
	<h4>Displaying the Program</h4>
</hgroup>
	<hr class="green-groove" />

<p>
	<span><b>Note</b>.</span>
	<span>In EcmaScript 5, we accommodate small screens in landscape mode when highlighting a code block through the use of the</span> 
	<span>'<kbd>\</kbd>' back-slash key when seperating otherwise un-terminated string literals, as follows:</span>
</p>
<hr class='green-groove' />

<pre class="flex-box">
<span>The program as is, written in Javascript ...</span>
{% highlight javascript %}
//Set the constants
const TAX_RATE = 0.25;
/* where TAX_RATE is a decimal percentage */
const SHARES = 10000;
/* where the issued and outstanding SHARES \
are expressed in the number of voting units */
const DIV_RATE = 0.05;
/* where DIV_RATE is expressed in \
cents per share */

//Set the variables
var gr = 10000;
/* where gr = Gross Revenue */
var cgs = 4000;
/* where cgs = Cost of Goods Sold */
var oi = gr - cgs;
/* where oi = Operating Income */
var exp = 3500;
/* where exp = Expenses Paid */
var ti = oi - exp;
/* where ti = Taxable Income */
var ct = ti * TAX_RATE;
/* where ct = Corporate Tax */
var ni = ti - ct;
/* where ni = Net Income */
var eps = ni/SHARES;
/* where eps = Earnings Per Share */
var dp = SHARES * DIV_RATE;
/* where dp = Dividend Paid */
var re = ni - dp;
/* where re = Retained Earnings */

//Set and Flash Gross Revenue
console.log("gross revenue = " + gr);
let GR = "$" + String(gr.toFixed(2));
window.alert("The gross revenue received \
by your company for the tax year of \
2000 is " + GR + " USD");

//Set and Flash Cost of Goods Sold
console.log("cost of goods sold = " + cgs);
let CGS = "$" + String(cgs.toFixed(2));
window.alert("The cost of goods sold \
required to directly generate your gross \
revenue in the year 2000 is " + CGS + " USD");

//Set and Flash Operating Income
console.log("operating income = " + oi);
let OI = "$" + String(oi.toFixed(2));
window.alert("Therefore, the operating income \
generated by your company in the year \
2000 is " + OI + " USD");

//Set and Flash Expenses
console.log("expenses = " + exp);
let EXP = "$" + String(exp.toFixed(2));
window.alert("The expenses of your \
operation that are allowed to be \
indirectly deducted from your operating \
income subtotal are " + EXP + " USD");

//Set and Flash Taxable Income
console.log("taxable income = " + ti);
let TI = "$" + String(ti.toFixed(2));
window.alert("Your taxable income \
( Before Tax ) is therefore \
" + TI + " USD");

//Set and Flash Corporate Tax
console.log("corporate tax = " + ct);
let CT = "$" + String(ct.toFixed(2));
window.alert("Your corporate tax is \
based on a rate of " + TAX_RATE*100 \
+ "% of taxable income and is " \
+ CT + " USD for the tax year of 2000.");

//Set and Flash Net Income
console.log("net income = " + ni);
let NI = "$" + String(ni.toFixed(2));
window.alert("Your net income \
( After Tax ) is therefore " \
+ NI + " USD");

//Set and Flash Earnings Per Share
console.log("earnings per share = " + eps);
let EPS = "$" + String(eps.toFixed(4));
window.alert("Your earnings per share \
( Before Dividend Paid ) is " + EPS + " USD");

//Set and Flash Dividend Paid
console.log("dividend paid = " + dp);
let DP = "$" + String(dp.toFixed(2));
window.alert("Your aggregate dividend paid \
to shareholders is " + DP + " USD");

//Set and Flash Retained Earnings
console.log("retained earnings = " + re);
let RE = "$" + String(re.toFixed(2));
window.alert("Therefore, the aggregate \
amount of earnings per share retained \
by your company for future business use \
is " + RE + " USD");

//Set and Flash a Closing Line
window.alert("Thank you for engaging the \
'Altering the Constant' program. Please see \
the console log for a list of \
the results of your calculations.");
{% endhighlight %}
<span>Time to execute!</span>
</pre>
	<hr class="green-groove" />

<p>
	<span>Go ahead and follow the above Firefox Web-console Instructions to execute the program.</span>
</p>
	<hr class='green-groove' />

<hgroup class='text-left'>
    <h4>Strict Mode</h4>
</hgroup>
    <hr class='green-groove' />

<p>
    <span>Now, that works fine.</span>
    <span>But, how will the code execute in Strict Mode?</span>
    <span>One way to find out is to transfer our code to a (<a href="../js/scripts/altering-the-constant.js" title="Click To Review the Original Javascript file" target="_blank">.js</a>) page and invoke Strict Mode at the top of the program.</span>
</p>

<pre class='flex-box'>
<span>Invoke Strict Mode ...</span>
{% highlight html linenos %}
//Strict Objects
'use strict';
{% endhighlight %}
<span>Place at the top of program.</span>
</pre>
	<hr class='green-groove' />

<p>
    <span>Let's try that.</span>
</p>

<p>
	<span>Transferring the above highlighted code block to a (<a href="../js/scripts/altering-the-constant.js" title="Click To Review the Original Javascript file" target="_blank">.js</a>) page ...</span> 
	<span>Eliminating the back-slashes ...</span>
</p>
	<hr class='green-groove' />

<p>
	<span>Now, open up the (<a href="../js/scripts/altering-the-constant.js" title="Click To Review the Original Javascript file" target="_blank">.js</a>) file is a separate browser window and copy and paste the code into the Firefox Web-console.</span>
	<span>Then, hit <kbd>Enter</kbd>.</span>
</p>
	<hr class='green-groove' />

<p>
	<span>Looks good!</span>
</p>
	<hr class='green-groove' />

<hgroup class='text-left'>
    <h4>Template Literals Using Back-ticks</h4>
</hgroup>
    <hr class='green-groove' />

<p>
    <span>Though our program works fine in either traditional EcmaScript 5 safe mode, or in EcmaScript 6 strict mode ... something new is missing.</span>
</p>

<p>
    <span>Namely, the use of `backticks` to accommodate the long window alerts with calls to locally declared, block scope variables, or let(s).</span>
</p>

<p>
    <span>Let's replace those really long window alerts with multi-line Template Literals enclosed in `backticks` to see what happens.</span>
</p>

<p>
	<span>More to come ...</span>
</p>

<pre class='flex-box'>
    <span lang='es' title='Sp. for 'Finish''>Finito! <i class='icon-large icon-flower'></i></span>
</pre>

<footer class="page-footer center-block">
	<br />
	<p>
		<span><b>Source</b>:</span>
		<span><a href="http://amzn.to/2kz9XHi" 
		title="Click to Review You Don't Know Js: Up and Going by Kyle Simpson" 
		target="_blank">You Don't Know Js: Up and Going</a></span>
	</p>

	<p>
		<span>See: The </span>
		<span><a href="http://amzn.to/2kz9XHi"
		title="Click to Review You Don't Know Js: Up and Going by Kyle Simpson"
		target="_blank">eBook</a> by <a href="#" title="Click to Review the Sitepoint author Kyle Simpson"
		target="_blank">Kyle Simpson</a></span>
	</p>

	<p>
    	<span>Original Copyright 2015 Getify Solutions, Inc.</span>
		<span>Austin, TX USA</span>
	</p>
		<hr class="green-groove" />

	{% include footer.htm %}
</footer>

</article>
</main>

</div>
</div>