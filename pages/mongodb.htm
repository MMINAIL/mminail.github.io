---
layout: default
title: MongoDB Page | Carbon Free Footprint Project
---
<hgroup class="leftalign">
	<h3>MongoDB Commands and Functions</h3>
</hgroup>
	<hr />
	
<p>
	<span>Welcome! This is the MongoDB Page of the <b>Carbon Free Footprint</b> project.</span>
</p>

<p>
	<span>To install the Mongo DB database software in Mac OSX using MacPorts visit this repo on GitHub ...</span>
</p>

<p>
	<a href="https://medmj.us/MongoMacPort" title="Clik to Jump To the Macports - MongoDB repo at GitHub" target="_blank">How To Install Mongo DB On Mac OSX With MacPorts via GitHub</a>
</p>
	
<p>
    <span>Because the Mongo Server (MS) shell is written in Javascript ...</span>
    <span>( the parenthesis ) are very important!</span>
</p>

<p>
    <span>Semi-colons are shown here and there throughout the code samples to illustrate a line ending.</span>
    <span>But, are not needed in the Javascript shell of MongoDB to execute a command line.</span>
</p>

<p>
    <span>What follows, are some important MongoDB Shell commands and functions for the fledgling reader to master.</span>
</p>

<p>
	<span>More to come ...</span>
</p>
	<hr class="green-groove" />

<h3>The Fun Begins Here</h3>

<p>
	<span>Here, a block of code for the MongoDB Javascript shell may be displayed and wordwrapped in real time</span>
    <span>via <a href="https://pages.github.com/" title="Clik to Jump To GitHub Pages" target="_blank">GitHub Pages</a></span>
    </span>when enclosed in a proper <a href="#" title="Clik to Jump To the Liquid repo at GitHub" target="_blank">Liquid</a> wrapper.</span>
</p>

<p>
    <span>Each subheading that follows represents a MongoDB command or an important function</span>
    <span>with a little bit of explanation tossed in as a Javascript comment to whet the whistle of the database specialist.</span>
</p>
	<hr class="green-groove" />

<h4>Mongo Chevron</h4>
<p>
	<span>Intro to the Chevron ...</span>
</p>

<p>
	<span>Once you have successfully installed MongoDB on your machine you may open up a terminal window and type 'mongo'.</span>
	<span>The command 'mongo' will connect a shell to your running server and the 'chevron' will appear.</span>
</p>

<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// where the Mongo Server (MS) accepts commands a.k.a the 'chevron'
>;
{% endhighlight %}
<!--
</code>
</pre>
-->

<h5>For Example ( <span lang="es" title="For Example">Por Ejemplo</span> ) ...</h5>
<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// Enter your command here at the 'chevron' prompt
>;
{% endhighlight %}
<!--
</code>
</pre>
-->
	<hr class="green-groove" />

<h4>Mongo Version</h4>
<p>
	<span>Intro to the 'version()' function ...</span>
</p>

<p>
	<span>More to come ...</span>
</p>

<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// where db is the wake-up command to the (MS) to provide the current 'version' of the Mongo Server (MS)
db.version();
// the (MS) returns the version number of your MongoDB install
3.2.11
// the 'chevron' prompt returns ready for your next command ( or, function )
>;
{% endhighlight %}
<!--
</code>
</pre>
-->
	<hr class="green-groove" />

<h4>Mongo Help</h4>
<p>
	<span>Intro to the 'help()' function ...</span>
</p>

<p>
	<span>More to come ...</span>
</p>
<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// where db is the wake-up command to the Mongo Server (MS) to provide general help
db.help();
{% endhighlight %}
<!--
</code>
</pre>
-->
<h5>For Example ( <span lang="es" title="For Example">Por Ejemplo</span> ) ...</h5>
<p>
	<span>(MS) will provide specific 'help', too ...</span>
	<span>Whenever a collection is specified within the 'help' function.</span>
</p>
<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// where 'frame' is the name of a collection of documents within the current working database
db.frame.help();
{% endhighlight %}
<!--
</code>
</pre>
-->
	<hr class="green-groove" />

<h4>Mongo Use</h4>
<p>
	<span>Intro to the MongoDB 'use' command ...</span>
</p>

<p>
	<span>How To Declare and Change the Working Database ...</span>
</p>

<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// where the command 'use' asks the (MS) to switch to the database named 'cls'
// even if the database has not yet been created!
use cls;
{% endhighlight %}
<!--
</code>
</pre>
-->
<h5>For Example ( <span lang="es" title="For Example">Por Ejemplo</span> ) ...</h5>
<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// Response from the (MS) where the Mongo Server (MS) says switch is in effect to the database 'cls'
>switched to db cls
// then the 'chevron' prompt returns
>;
{% endhighlight %}
<!--
</code>
</pre>
-->
	<hr class="green-groove" />

<h4>Mongo getCollectionNames() function</h4>
<p>
	<span>Intro to the MongoDB 'getCollectionNames()' function ...</span>
</p>

<p>
    <span>Initially, when performing this 'getCollectionNames()' function on a database void of any 'collection', the prompt returns an empty array '[&nbsp;&nbsp;]', as follows:
</p>

<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// where the result is initially an empty array of collections ...
// the function getCollectionNames() returns the symbol '[ ]'
db.getCollectionNames();
>[ ];
// then the 'chevron' prompt for the entering of the next command returns
>;
{% endhighlight %}
<!--
</code>
</pre>
-->

<h5>For Example ( <span lang="es" title="For Example">Por Ejemplo</span> ) ...</h5>
<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// where a database named 'learn' houses a single collection named 'unicorns' ...
db.getCollectionNames();
// the function returns an array of one
[ "unicorns" ]
// then the 'chevron' prompt revisits the terminal
>;
{% endhighlight %}
<!--
</code>
</pre>
-->
	<hr class="green-groove" />

<h4>Mongo Insert</h4>
<p>
	<span>Intro to the MongoDB 'insert()' function ...</span>
</p>

<p>
    <span>To insert a single document into the 'frame' collection of the working database ...</span>
</p>

<h5>For Example ( <span lang="es" title="For Example">Por Ejemplo</span> ) ...</h5>
<p>
	<span>Where the result is a single inserted document into the 'frame' collection ...</span>
</p>

<p>
	<span>Where one or more 'key: value' sets of 'fields' within a single document are to be declared with the insert function.</span>
</p>

<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// When hitting the carriage return after typing this ...
db.frame.insert({name: 'Aurora', gender: 'f', weight: 450});
// the (MS) returns the following result
WriteResult({ "nInserted" : 1 })
// The result is a single document has been added to the collection 'frame'
{% endhighlight %}
<!--
</code>
</pre>
-->

<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// After the (MS) acknowledges the insert, the 'chevron' prompt for the entering of your next command returns
>;
{% endhighlight %}
<!--
</code>
</pre>
-->
	<hr class="green-groove" />

<h4>Mongo getCollectionNames() revisited</h4>
<p>
	<span>Revisiting the MongoDB 'getCollectionNames()' function ...</span>
</p>

<p>
	<span>After inserting the single document into the 'frame' collection ...</span>
</p>

<p>
	<span>When we pull the function 'getCollectionNames()' again</span>
	<span>from the arsenal of functions available in MongoDB</span>
	<span>we get an acknowledgement from the (MS) that a collection named 'frame'</span>
	<span>has also been created where previously there was an empty array returned, as follows:</span>
</p> 

<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// where a collection named 'frame' is now resident in the working database
db.getCollectionNames()
>[ "frame" ]
// then the 'chevron' prompt returns
>;
{% endhighlight %}
<!--
</code>
</pre>
-->

<p>
	<span>In effect, the collection was declared first, and then a document was inserted secondly into the working database.</span>
	<span>Consequently, all of the fields ( key - value pairs ) of the now inserted document are house'd within the collection 'frame' of the working database.</span>
</p>
	<hr class="green-groove" />

<h4>Simple Array</h4>
<p>
    <span>How To Insert a Simple Array Into the 'frame' Collection ...</span>
</p>

<p>
	<span>A simple array is considered to be its own document, as well.</span>
</p>

<p>
	<span>Remember, Simple Arrays appear within a [ set of brackets ] in Mongo.</span>
</p>

<h5>For Example ( <span lang="es" title="For Example">Por Ejemplo</span> ) ...</h5>
<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// If successful upon tapping the 'enter' key ...
db.frame.insert({"fruits" : [
"apple",
"pear",
"orange",
"banana"]
});
// the (MS) returns the following result
WriteResult({ "nInserted" : 1 })
// And, the 'chevron' prompt revisits the terminal
>;
{% endhighlight %}
<!--
</code>
</pre>
-->

<p>
	<span>Here, try another array ...</span>
</p>

<h5>For Example ( <span lang="es" title="For Example">Por Ejemplo</span> ) ...</h5>
<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// If successful upon tapping the 'enter' key ...
db.frame.insert({"autos" : [
"chrysler",
"bmw",
"ford",
"general motors",
"volkswagen"]
});
// the (MS) returns the following result
WriteResult({ "nInserted" : 1 })
// And, the 'chevron' prompt revisits the terminal
>;
{% endhighlight %}
<!--
</code>
</pre>
-->

<h4>Embedded Document</h4>
<p>
    <span>How To Insert an Embedded Document Into the 'frame' Collection ...</span>
</p>

<p>
	<span>An Embedded Document holds the key - value pairs of another document, as follows:</span>
</p>

<h5>For Example ( <span lang="es" title="For Example">Por Ejemplo</span> ) ...</h5>
<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// If, however, the insert is not successful ...
db.frame.insert({"home" : "ejs26aa01a",
"address" : {
	"owner : "Edward John Smith",
	"phone" : "206-000-0000",
	"correo" : "1423",
	"street" : "Jerry",
	"type" : "Rd",
	"compass" : null,
	"city" : "Seattle",
	"state" : "WA",
	"zip" :  "98109-5210"}
});
// the (MS) will return an error message, similar to the following ...
SyntaxError: missing : after property id @(shell):3:9
{% endhighlight %}
<!--
</code>
</pre>
-->

<p>
	<span>Here, the operator failed to close "quotes" in line 3, at character 9</span>
</p>

<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// Should be "owner" ... now, you're cook'n!
WriteResult({ "nInserted" : 1 })
// And, the 'chevron' prompt revisits the terminal
>;
{% endhighlight %}
<!--
</code>
</pre>
-->

<p>
	<span>Try another Embedded Document ...</span>
</p>

<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// This one looks accurate ...
db.frame.insert({"person" : "20nov16ejs26aa01a",
"name" : {
	"last" : "Smith",
	"first" : "Edward",
	"mid" : "John",
	"suffix" : null,
	"dob" : "010177",
	"bmi" : 30.05,
	"email" : "jsmiwa@me.com",
	"entity" : "206WA98109a1a001",
	"home" : "ejs26aa01a"}
});
// And it is!
WriteResult({ "nInserted" : 1 })
// the 'chevron' prompt revisits the terminal
>;
{% endhighlight %}
<!--
</code>
</pre>
-->

<p>
	<span>Notice how the accurate 'person' document holds a 'key - value' pair that corresponds to the 'entity' document below as well as the 'home' document above.</span>
</p>

<p>
	<span>A Dun and Bradstreet assigned number can substitute for the 'entity' value,</span>
	<span>and a county parcel number can substitute for the value of the 'home' key.</span>
</p>

<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// This one looks accurate, too ...
db.frame.insert({"entity" : "206WA98109a1a001",
"address" : {
	“name” : “Amazon Legal Dept”,
	"phone" : "206-266-4064",
	"correo" : "410",
	"street" : "Terry",
	"type" : "Avenue",
	"compass" : "North",
	"city" : "Seattle",
	"state" : "WA",
	"zip" :  "98109-5210"
	“credit” : “a1a”}
});
// And it is!
WriteResult({ "nInserted" : 1 })
// the 'chevron' prompt revisits the terminal
>;
{% endhighlight %}
<!--
</code>
</pre>
-->
	<hr class="green-groove" />

<h4>Mongo Find</h4>
<p>
	<span>Intro to the MongoDB 'find()' function ...</span>
</p>

<p>
	<span>More to come ...</span>
</p>

<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// back to the 'chevron'
>;
{% endhighlight %}
<!--
</code>
</pre>
-->
	<hr class="green-groove" />

<h4>Mongo Indexes</h4>
<p>
	<span>Intro to the MongoDB 'getIndexes()' function ...</span>
</p>

<p>
	<span>When we pull the function 'getIndexes()' from the arsenal of functions available in MongoDB ...</span>
</p>

<p>
	<span>More to come ...</span>
</p>

<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// where 'frame' is a collection in the working database
db.frame.getIndexes();
{% endhighlight %}
<!--
</code>
</pre>
-->
	<hr class="green-groove" />

<h4>Mongo Remove</h4>
<p>
	<span>Intro to the MongoDB 'remove() function ...</span>
</p>

<p>
    <span>To wipe a collection clean ...</span>
    <span>Invoke the simplest of JSON objects ( which is the Empty Object ) denoted by a vacant set of curly braces '{&nbsp;&nbsp;}'.</span>
</p>
    <span>Here, the Empty Object '{&nbsp;&nbsp;}' matches the term 'All Documents'.</span>
</p>

<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// To remove all of the documents currently stored in the collection 'frame' invoke ...
db.frame.remove({ })
{% endhighlight %}
<!--
</code>
</pre>
-->
	<hr class="green-groove" />
	
<h4>Mongo Export</h4>
<p>
	<span>Intro to the MongoDB 'mongoexport' command ...<span>
</p>

<p>		
    </span>More to come ...</span>
</p>

<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// where an export data command to a (.json) or a (.csv) file may be excuted
mongoexport;
{% endhighlight %}
<!--
</code>
</pre>
-->

<p>
    <span>JSON is the default format used by MongoDB when exporting data ( fields ) from a collection within a database.</span>
</p>

<p>
    <span>A data output in JSON format can be rendered by the (MS), as follows:</span>
</p>

<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// where 'yourdata' is the name of a MongoDB database, and
// 'frame' is the name of a collection of documents within your MongoDB database
mongoexport --db yourdata --collection frame
{% endhighlight %}
<!--
</code>
</pre>
-->

<p>
    <span>MongoDB can also export data ( fields ) into the standard (.csv) format, as well.</span>
</p>

<p>
    <span>Here, the (MS) exports the (.csv) fields of name, weight, and gender from the 'frame' collection house'd within the database named 'yourdata'.</span>
</p>

<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
mongoexport --db yourdata \
--collection frame \
--csv --fields name,weight,gender
{% endhighlight %}
<!--
</code>
</pre>
-->
	<hr class="green-groove" />

<h4>Mongo Import</h4>

<p>
	<span>Intro to the 'mongoimport' command ...<span>
</p>

<p>		
    </span>More to come ...</span>
</p>

<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// where an import data command from a (.json) or a (.csv) file may be excuted
mongoimport;
{% endhighlight %}
<!--
</code>
</pre>
-->

<h4>Mongo Stats</h4>
<p>
	<span>Intro to the 'stats()' function ...</span>
</p>

<p>
	<span>More to come ...</span>
</p>

<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// where db is the wake-up command to the Mongo Server (MS) to provide stats
db.stats();
{% endhighlight %}
<!--
</code>
</pre>
-->
	<hr class="green-groove" />

<h4>Mongo Count</h4>
<p>
	<span>Intro to the 'count()' function ...</span>
</p>

<p>
	<span>The (MS) will provide a specific 'count' ...</span>
</p>

<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// where 'frame' is the name of a collection of documents within the current working database
db.frame.count();
{% endhighlight %}
<!--
</code>
</pre>
-->
	<hr class="green-groove" />

<h4>Mongo Status</h4>
<p>
	<span>Intro to the 'serverStatus()' function ...</span>
</p>

<p>
	<span>More to come ...</span>
</p>

<!--
<pre>
<span>Highlighting MongoDB code w Rouge via liquid</span>
<code> -->
{% highlight javascript linenos %}
// where db is the wake-up command to the (MS) to provide the current 'serverStatus' of the Mongo Server (MS)
db.serverStatus();
{% endhighlight %}
<!--
</code>
</pre>
-->
	<hr class="green-groove" />

<footer>
    <p>
        <span>The code snippets for this article have been extracted ( and, spruced up a little bit ) from the <a href="http://github.com/karlseguin/the-little-mongodb-book" title="Click to Review the Little MongoDB eBook by Karl Seguin" target="_blank">Little MongoDB eBook</a> by Karl Seguin</span>
    </p>
	{% include footer.htm %}
</footer>
